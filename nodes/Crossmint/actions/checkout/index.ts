import { INodeProperties } from 'n8n-workflow';

export { findProduct } from './findProduct.operation';
export { purchaseProduct } from './purchaseProduct.operation';
export { bookFlight } from './bookFlight.operation';

export const checkoutFields: INodeProperties[] = [
	{
		displayName: 'Operation',
		name: 'operation',
		type: 'options',
		noDataExpression: true,
		displayOptions: { show: { resource: ['checkout'] } },
		options: [
			{
				name: 'Create Order',
				value: 'findProduct',
				description: 'Search and find products on Amazon and Shopify',
				action: 'Create order',
			},
			{
				name: 'Pay Order',
				value: 'purchaseProduct',
				description: 'Purchase a product with automated checkout',
				action: 'Pay order',
			},
			{
				name: 'Book Flight',
				value: 'bookFlight',
				description: 'Search and book flights using Worldstore',
				action: 'Book flight',
			},
		],
		default: 'findProduct',
	},
	{
		displayName: 'Platform',
		name: 'platform',
		type: 'options',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'] } },
		options: [
			{ name: 'Amazon', value: 'amazon', description: 'Amazon marketplace' },
			{ name: 'Shopify', value: 'shopify', description: 'Shopify store' },
			{ name: 'Flight', value: 'flight', description: 'Flight booking via Worldstore' },
		],
		default: 'amazon',
		description: 'E-commerce platform for the purchase',
		required: true,
	},
	// ---- Find Product fields (all fields needed for POST /orders)

	// ---- Purchase Product fields (Step 2: Submit Transaction)
	{
		displayName: 'Serialized Transaction',
		name: 'serializedTransaction',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['purchaseProduct'] } },
		default: '',
		placeholder: 'Copy from Find Product response: order.payment.preparation.serializedTransaction',
		description: 'Serialized transaction from Find Product response',
		required: true,
	},
	{
		displayName: 'Payment Chain',
		name: 'paymentMethod',
		type: 'options',
		displayOptions: { show: { resource: ['checkout'], operation: ['purchaseProduct'] } },
		options: [
			{ name: 'Arbitrum', value: 'arbitrum', description: 'Arbitrum network' },
			{ name: 'Arbitrum Sepolia', value: 'arbitrum-sepolia', description: 'Arbitrum testnet' },
			{ name: 'Base', value: 'base', description: 'Base network' },
			{ name: 'Base Sepolia', value: 'base-sepolia', description: 'Base testnet' },
			{ name: 'Ethereum', value: 'ethereum', description: 'Ethereum mainnet' },
			{ name: 'Ethereum Sepolia', value: 'ethereum-sepolia', description: 'Ethereum testnet' },
			{ name: 'Optimism', value: 'optimism', description: 'Optimism network' },
			{ name: 'Optimism Sepolia', value: 'optimism-sepolia', description: 'Optimism testnet' },
			{ name: 'Polygon', value: 'polygon', description: 'Polygon network' },
			{ name: 'Polygon Amoy', value: 'polygon-amoy', description: 'Polygon testnet' },
			{ name: 'World Chain Sepolia', value: 'world-chain-sepolia', description: 'World Chain testnet' },
		],
		default: 'arbitrum-sepolia',
		description: 'Payment method for completing the transaction',
		required: true,
	},
	{
		displayName: 'Payer Wallet Address',
		name: 'payerAddress',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['purchaseProduct'] } },
		default: '',
		placeholder: '0x1234567890123456789012345678901234567890',
		description: 'Agent wallet address for crypto payments - must be a Crossmint managed wallet with USDC funds',
		required: true,
	},
	// External signer is always required for Pay Order
	{
		displayName: 'Private Key',
		name: 'purchasePrivateKey',
		type: 'string',
		typeOptions: { password: true },
		displayOptions: { show: { resource: ['checkout'], operation: ['purchaseProduct'] } },
		default: '',
		placeholder: '0x1234... for EVM or base58 for Solana',
		description: 'Private key to sign with (32-byte hex for EVM, base58 for Solana) - External signer is required',
		required: true,
	},
	{
		displayName: 'Product Identifier',
		name: 'productIdentifier',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'], platform: ['amazon'] } },
		default: '',
		placeholder: 'B01DFKC2SO or https://www.amazon.com/dp/B01DFKC2SO',
		description: 'Amazon ASIN (e.g. B01DFKC2SO) or full Amazon product URL',
		required: true,
	},
	{
		displayName: 'Product Identifier',
		name: 'productIdentifier',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'], platform: ['shopify'] } },
		default: '',
		placeholder: 'https://store.shopify.com/products/product-handle',
		description: 'Full Shopify product URL (will use default variant)',
		required: true,
	},

	// ---- Flight fields for Create Order (when platform is flight)
	{
		displayName: 'Origin Airport (IATA)',
		name: 'originIATA',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'], platform: ['flight'] } },
		default: '',
		placeholder: 'JFK',
		description: '3-letter IATA airport code for departure',
		required: true,
	},
	{
		displayName: 'Destination Airport (IATA)',
		name: 'destinationIATA',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'], platform: ['flight'] } },
		default: '',
		placeholder: 'ATH',
		description: '3-letter IATA airport code for arrival',
		required: true,
	},
	{
		displayName: 'Departure Date',
		name: 'departureDate',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'], platform: ['flight'] } },
		default: '',
		placeholder: '2025-07-19',
		description: 'Departure date in YYYY-MM-DD format',
		required: true,
	},
	{
		displayName: 'Flight IDs',
		name: 'flightIds',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'], platform: ['flight'] } },
		default: '',
		placeholder: 'AY4161,LH123',
		description: 'Comma-separated list of flight IDs to search for',
		required: true,
	},
	{
		displayName: 'Cabin Class',
		name: 'cabinClass',
		type: 'options',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'], platform: ['flight'] } },
		options: [
			{ name: 'Economy', value: 'economy' },
			{ name: 'Premium Economy', value: 'premium_economy' },
			{ name: 'Business', value: 'business' },
			{ name: 'First', value: 'first' },
		],
		default: 'economy',
		description: 'Cabin class for the flight',
		required: true,
	},
	{
		displayName: 'Number of Passengers',
		name: 'passengerCount',
		type: 'number',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'], platform: ['flight'] } },
		default: 1,
		description: 'Number of passengers traveling',
		required: true,
	},

	// Passenger details for flights in Create Order
	{
		displayName: 'Passenger Title',
		name: 'passengerTitle',
		type: 'options',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'], platform: ['flight'] } },
		options: [
			{ name: 'Mr', value: 'mr' },
			{ name: 'Mrs', value: 'mrs' },
			{ name: 'Ms', value: 'ms' },
			{ name: 'Dr', value: 'dr' },
		],
		default: 'mr',
		required: true,
	},
	{
		displayName: 'Passenger First Name',
		name: 'passengerFirstName',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'], platform: ['flight'] } },
		default: '',
		placeholder: 'John',
		description: 'Passenger first name as on passport',
		required: true,
	},
	{
		displayName: 'Passenger Last Name',
		name: 'passengerLastName',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'], platform: ['flight'] } },
		default: '',
		placeholder: 'Doe',
		description: 'Passenger last name as on passport',
		required: true,
	},
	{
		displayName: 'Passenger Birth Date',
		name: 'passengerBirthDate',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'], platform: ['flight'] } },
		default: '',
		placeholder: '1980-01-01',
		description: 'Passenger birth date in YYYY-MM-DD format',
		required: true,
	},
	{
		displayName: 'Passenger Gender',
		name: 'passengerGender',
		type: 'options',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'], platform: ['flight'] } },
		options: [
			{ name: 'Male', value: 'm' },
			{ name: 'Female', value: 'f' },
			{ name: 'Other', value: 'other' },
		],
		default: 'm',
		required: true,
	},
	{
		displayName: 'Passenger Phone',
		name: 'passengerPhone',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'], platform: ['flight'] } },
		default: '',
		placeholder: '+14155552671',
		description: 'Passenger phone number with country code',
		required: true,
	},

	// Passport Information for flights in Create Order
	{
		displayName: 'Passport Number',
		name: 'passportNumber',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'], platform: ['flight'] } },
		default: '',
		placeholder: '123456789',
		required: true,
	},
	{
		displayName: 'Passport Country',
		name: 'passportCountry',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'], platform: ['flight'] } },
		default: '',
		placeholder: 'US',
		description: 'Two-letter country code of passport issuing country',
		required: true,
	},
	{
		displayName: 'Passport Expiry Date',
		name: 'passportExpiry',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'], platform: ['flight'] } },
		default: '',
		placeholder: '2030-04-24',
		description: 'Passport expiry date in YYYY-MM-DD format',
		required: true,
	},
	{
		displayName: 'Recipient Email',
		name: 'recipientEmail',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'] } },
		default: '',
		placeholder: 'recipient@example.com',
		description: 'Email address of the person receiving the product',
		required: true,
	},
	{
		displayName: 'Recipient Name',
		name: 'recipientName',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'] } },
		default: '',
		placeholder: 'Manuel Paella',
		description: 'Full name of the recipient',
		required: true,
	},
	{
		displayName: 'Address Line 1',
		name: 'addressLine1',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'] } },
		default: '',
		placeholder: '123 Fake Street',
		description: 'Street address, P.O. box, company name, c/o.',
		required: true,
	},
	{
		displayName: 'Address Line 2 (Optional)',
		name: 'addressLine2',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'] } },
		default: '',
		placeholder: 'Apartment 4B',
		description: 'Apartment, suite, unit, building, floor, etc',
	},
	{
		displayName: 'City',
		name: 'city',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'] } },
		default: '',
		placeholder: 'Valencia',
		description: 'City, district, suburb, town, or village',
		required: true,
	},
	{
		displayName: 'State',
		name: 'state',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'] } },
		default: '',
		placeholder: 'FL',
		description: 'US State (required)',
		required: true,
	},
	{
		displayName: 'ZIP Code',
		name: 'postalCode',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'] } },
		default: '',
		placeholder: '33130',
		description: 'US ZIP code',
		required: true,
	},
	{
		displayName: 'Country',
		name: 'country',
		type: 'options',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'] } },
		options: [
			{ name: 'United States', value: 'US' },
		],
		default: 'US',
		description: 'Two-letter country code (ISO 3166-1 alpha-2)',
		required: true,
	},
	{
		displayName: 'Environment',
		name: 'environment',
		type: 'options',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'] } },
		options: [
			{ name: 'Staging (Testnet)', value: 'staging', description: 'Use testnet chains for testing' },
			{ name: 'Production (Mainnet)', value: 'production', description: 'Use mainnet chains for real transactions' },
		],
		default: 'staging',
		description: 'Environment to use for payment methods',
		required: true,
	},
	{
		displayName: 'Payment Chain',
		name: 'paymentMethod',
		type: 'options',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'], environment: ['staging'] } },
		options: [
			{ name: 'Arbitrum Sepolia', value: 'arbitrum-sepolia', description: 'Arbitrum testnet' },
			{ name: 'Base Sepolia', value: 'base-sepolia', description: 'Base testnet' },
			{ name: 'Ethereum Sepolia', value: 'ethereum-sepolia', description: 'Ethereum testnet' },
			{ name: 'Optimism Sepolia', value: 'optimism-sepolia', description: 'Optimism testnet' },
			{ name: 'Polygon Amoy', value: 'polygon-amoy', description: 'Polygon testnet' },
			{ name: 'World Chain Sepolia', value: 'world-chain-sepolia', description: 'World Chain testnet' },
		],
		default: 'arbitrum-sepolia',
		description: 'Payment method for the purchase (Staging/Testnet)',
		required: true,
	},
	{
		displayName: 'Payment Chain',
		name: 'paymentMethod',
		type: 'options',
		displayOptions: { show: { resource: ['checkout'], operation: ['findProduct'], environment: ['production'] } },
		options: [
			{ name: 'Arbitrum', value: 'arbitrum', description: 'Arbitrum network' },
			{ name: 'Base', value: 'base', description: 'Base network' },
			{ name: 'Ethereum', value: 'ethereum', description: 'Ethereum mainnet' },
			{ name: 'Optimism', value: 'optimism', description: 'Optimism network' },
			{ name: 'Polygon', value: 'polygon', description: 'Polygon network' },
		],
		default: 'ethereum',
		description: 'Payment method for the purchase (Production/Mainnet)',
		required: true,
	},
	{
		displayName: 'Payment Currency',
		name: 'paymentCurrency',
		type: 'options',
		displayOptions: {
			show: {
				resource: ['checkout'],
				operation: ['findProduct'],
				paymentMethod: ['ethereum-sepolia', 'polygon-amoy', 'base-sepolia', 'arbitrum-sepolia', 'optimism-sepolia', 'world-chain-sepolia', 'ethereum', 'polygon', 'base', 'arbitrum', 'optimism'],
			},
		},
		options: [
			{ name: 'USDC', value: 'usdc', description: 'USD Coin (Only supported currency)' },
		],
		default: 'usdc',
		description: 'Cryptocurrency to pay with (USDC only)',
		required: true,
	},
	{
		displayName: 'Payer Wallet Address',
		name: 'payerAddress',
		type: 'string',
		displayOptions: {
			show: {
				resource: ['checkout'],
				operation: ['findProduct'],
				paymentMethod: ['ethereum-sepolia', 'polygon-amoy', 'base-sepolia', 'arbitrum-sepolia', 'optimism-sepolia', 'world-chain-sepolia', 'ethereum', 'polygon', 'base', 'arbitrum', 'optimism'],
			},
		},
		default: '',
		placeholder: '0x1234567890123456789012345678901234567890',
		description: 'Agent wallet address for crypto payments - must be a Crossmint managed wallet with USDC funds',
		required: true,
	},

	// ---- Flight Booking fields
	{
		displayName: 'Origin Airport (IATA)',
		name: 'originIATA',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['bookFlight'] } },
		default: '',
		placeholder: 'JFK',
		description: '3-letter IATA airport code for departure',
		required: true,
	},
	{
		displayName: 'Destination Airport (IATA)',
		name: 'destinationIATA',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['bookFlight'] } },
		default: '',
		placeholder: 'ATH',
		description: '3-letter IATA airport code for arrival',
		required: true,
	},
	{
		displayName: 'Departure Date',
		name: 'departureDate',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['bookFlight'] } },
		default: '',
		placeholder: '2025-07-19',
		description: 'Departure date in YYYY-MM-DD format',
		required: true,
	},
	{
		displayName: 'Cabin Class',
		name: 'cabinClass',
		type: 'options',
		displayOptions: { show: { resource: ['checkout'], operation: ['bookFlight'] } },
		options: [
			{ name: 'Economy', value: 'economy' },
			{ name: 'Premium Economy', value: 'premium_economy' },
			{ name: 'Business', value: 'business' },
			{ name: 'First', value: 'first' },
		],
		default: 'economy',
		description: 'Cabin class for the flight',
		required: true,
	},
	{
		displayName: 'Number of Passengers',
		name: 'passengerCount',
		type: 'number',
		displayOptions: { show: { resource: ['checkout'], operation: ['bookFlight'] } },
		default: 1,
		description: 'Number of passengers traveling',
		required: true,
	},
	{
		displayName: 'Flight IDs',
		name: 'flightIds',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['bookFlight'] } },
		default: '',
		placeholder: 'AY4161,LH123',
		description: 'Comma-separated list of flight IDs to search for',
		required: true,
	},

	// Passenger Information
	{
		displayName: 'Passenger Title',
		name: 'passengerTitle',
		type: 'options',
		displayOptions: { show: { resource: ['checkout'], operation: ['bookFlight'] } },
		options: [
			{ name: 'Mr', value: 'mr' },
			{ name: 'Mrs', value: 'mrs' },
			{ name: 'Ms', value: 'ms' },
			{ name: 'Dr', value: 'dr' },
		],
		default: 'mr',
		description: 'Passenger title',
		required: true,
	},
	{
		displayName: 'Passenger First Name',
		name: 'passengerFirstName',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['bookFlight'] } },
		default: '',
		placeholder: 'John',
		description: 'Passenger first name as on passport',
		required: true,
	},
	{
		displayName: 'Passenger Last Name',
		name: 'passengerLastName',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['bookFlight'] } },
		default: '',
		placeholder: 'Doe',
		description: 'Passenger last name as on passport',
		required: true,
	},
	{
		displayName: 'Passenger Birth Date',
		name: 'passengerBirthDate',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['bookFlight'] } },
		default: '',
		placeholder: '1980-01-01',
		description: 'Passenger birth date in YYYY-MM-DD format',
		required: true,
	},
	{
		displayName: 'Passenger Gender',
		name: 'passengerGender',
		type: 'options',
		displayOptions: { show: { resource: ['checkout'], operation: ['bookFlight'] } },
		options: [
			{ name: 'Male', value: 'm' },
			{ name: 'Female', value: 'f' },
			{ name: 'Other', value: 'other' },
		],
		default: 'm',
		description: 'Passenger gender',
		required: true,
	},
	{
		displayName: 'Passenger Email',
		name: 'passengerEmail',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['bookFlight'] } },
		default: '',
		placeholder: 'john@example.com',
		description: 'Passenger email address',
		required: true,
	},
	{
		displayName: 'Passenger Phone',
		name: 'passengerPhone',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['bookFlight'] } },
		default: '',
		placeholder: '+14155552671',
		description: 'Passenger phone number with country code',
		required: true,
	},

	// Passport Information
	{
		displayName: 'Passport Number',
		name: 'passportNumber',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['bookFlight'] } },
		default: '',
		placeholder: '123456789',
		description: 'Passport number',
		required: true,
	},
	{
		displayName: 'Passport Country',
		name: 'passportCountry',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['bookFlight'] } },
		default: '',
		placeholder: 'US',
		description: 'Two-letter country code of passport issuing country',
		required: true,
	},
	{
		displayName: 'Passport Expiry Date',
		name: 'passportExpiry',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['bookFlight'] } },
		default: '',
		placeholder: '2030-04-24',
		description: 'Passport expiry date in YYYY-MM-DD format',
		required: true,
	},

	// Payment Information for Flight Booking
	{
		displayName: 'Payment Chain',
		name: 'paymentMethod',
		type: 'options',
		displayOptions: { show: { resource: ['checkout'], operation: ['bookFlight'] } },
		options: [
			{ name: 'Arbitrum Sepolia', value: 'arbitrum-sepolia', description: 'Arbitrum testnet' },
			{ name: 'Base Sepolia', value: 'base-sepolia', description: 'Base testnet' },
			{ name: 'Ethereum Sepolia', value: 'ethereum-sepolia', description: 'Ethereum testnet' },
			{ name: 'Optimism Sepolia', value: 'optimism-sepolia', description: 'Optimism testnet' },
			{ name: 'Polygon Amoy', value: 'polygon-amoy', description: 'Polygon testnet' },
			{ name: 'World Chain Sepolia', value: 'world-chain-sepolia', description: 'World Chain testnet' },
		],
		default: 'base-sepolia',
		description: 'Blockchain network for payment',
		required: true,
	},
	{
		displayName: 'Payment Currency',
		name: 'paymentCurrency',
		type: 'options',
		displayOptions: { show: { resource: ['checkout'], operation: ['bookFlight'] } },
		options: [
			{ name: 'USDC', value: 'usdc', description: 'USD Coin' },
		],
		default: 'usdc',
		description: 'Cryptocurrency for payment',
		required: true,
	},
	{
		displayName: 'Payer Wallet Address',
		name: 'payerAddress',
		type: 'string',
		displayOptions: { show: { resource: ['checkout'], operation: ['bookFlight'] } },
		default: '',
		placeholder: '0x1234567890123456789012345678901234567890',
		description: 'Wallet address that will pay for the flight',
		required: true,
	},
];
